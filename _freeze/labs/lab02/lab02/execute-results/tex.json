{
  "hash": "79cabeffa1ae60c63cb57eccc2932c1f",
  "result": {
    "engine": "julia",
    "markdown": "---\ntitle: \"BEE 4750 Lab 2: Uncertainty and Monte Carlo\"\ndate: last-modified\nformat:\n    html:        \n        warning: true\n        error: true\n    ipynb:\n        warning: true\n        error: true\n        code-annotation: below\n    pdf:\n        include-in-header: \n           text: |\n            \\usepackage{fvextra}\n            \\DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\n            \\DefineVerbatimEnvironment{OutputCode}{Verbatim}{breaklines,commandchars=\\\\\\{\\}}\nexecute: \n    echo: true\nengine: julia\njulia:\n    exeflags: [\"+1.10.4\"]\nformat-links: [pdf, ipynb]\n---\n\n::: {.content-visible when-format=\"ipynb\"}\n::: {.cell .markdown}\n**Name**:\n\n**ID**:\n:::\n:::\n\n::: {.callout-important icon=false}\n### Due Date\n\nWednesday, 9/25/24, 9:00pm\n:::\n\n::: {.content-visible when-format=\"html\"}\n\n:::{.callout-caution}\n\nIf you are enrolled in the course, make sure that you use the GitHub Classroom link provided in Ed Discussion, or you may not be able to get help if you run into problems.\n\nOtherwise, you can [find the Github repository here]({{< var github_org.repo >}}/lab02).\n\n:::\n\n:::\n\n## Setup\n\nThe following code should go at the top of most Julia scripts; it will load the local package environment and install any needed packages. You will see this often and shouldn't need to touch it.\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nimport Pkg\nPkg.activate(\".\")\nPkg.instantiate()\n```\n:::\n\n\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing Random # random number generation\nusing Distributions # probability distributions and interface\nusing Statistics # basic statistical functions, including mean\nusing Plots # plotting\n```\n:::\n\n\n\n\n## Overview\n\nIn this lab, we will use Monte Carlo analysis to analyze a version of the culmination of every episode of the long-running game show [The Price Is Right](https://en.wikipedia.org/wiki/The_Price_Is_Right): the [Showcase](https://en.wikipedia.org/wiki/The_Price_Is_Right#Showcase). \n\nMonte Carlo methods involve the simulation of random numbers from probability distributions. In an environmental context, we often propagate these random numbers through some more complicated model and then compute a resulting statistic which is relevant for assessing performance or risk, such as an average outcome or a particular quantile.\n\nYou should always start any computing with random numbers by setting a \"seed,\" which controls the sequence of numbers which are generated (since these are not *really* random, just \"pseudorandom\"). In Julia, we do this with the `Random.seed!()` function.\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nRandom.seed!(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nTaskLocalRNG()\n```\n:::\n:::\n\n\n\nIt doesn't matter what seed you set, though different seeds might result in slightly different values. But setting a seed means every time your notebook is run, the answer will be the same.\n\n::: {.callout-warning}\n## Seeds and Reproducing Solutions\n\nIf you don't re-run your code in the same order or if you re-run the same cell repeatedly, you will not get the same solution. If you're working on a specific problem, you might want to re-use `Random.seed()` near any block of code you want to re-evaluate repeatedly.\n:::\n\n### Probability Distributions and Julia\n\nJulia provides a common interface for probability distributions with the [`Distributions.jl` package](https://juliastats.org/Distributions.jl/stable/). The basic workflow for sampling from a distribution is:\n\n1. Set up the distribution. The specific syntax depends on the distribution and what parameters are required, but the general call is the similar. For a normal distribution or a uniform distribution, the syntax is\n   \n    ```julia\n    # you don't have to name this \"normal_distribution\"\n    # μ is the mean and σ is the standard deviation\n    normal_distribution = Normal(μ, σ)\n    # a is the upper bound and b is the lower bound; these can be set to +Inf or -Inf for an unbounded distribution in one or both directions.\n    uniform_distribution = Uniform(a, b)\n    ```\n\n    There are lots of both [univariate](https://juliastats.org/Distributions.jl/stable/univariate/#Index) and [multivariate](https://juliastats.org/Distributions.jl/stable/multivariate/) distributions, as well as the ability to create your own, but we won't do anything too exotic here.\n2. Draw samples. This uses the `rand()` command (which, when used without a distribution, just samples uniformly from the interval $[0, 1]$.) For example, to sample from our normal distribution above:\n   \n    ```julia\n    # draw n samples\n    rand(normal_distribution, n)\n    ```\n\nPutting this together, let's say that we wanted to simulate 100 six-sided dice rolls. We could use a [Discrete Uniform distribution](https://juliastats.org/Distributions.jl/stable/univariate/#Distributions.DiscreteUniform).\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\ndice_dist = DiscreteUniform(1, 6) # can generate any integer between 1 and 6\ndice_rolls = rand(dice_dist, 100) # simulate rolls\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n100-element Vector{Int64}:\n 1\n 3\n 5\n 4\n 6\n 2\n 5\n 5\n 5\n 2\n ⋮\n 3\n 6\n 5\n 5\n 6\n 3\n 6\n 6\n 6\n```\n:::\n:::\n\n\n\nAnd then we can plot a histogram of these rolls:\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nhistogram(dice_rolls, legend=:false, bins=6)\nylabel!(\"Count\")\nxlabel!(\"Dice Value\")\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n![](lab02_files/figure-pdf/cell-6-output-1.svg){fig-pos='H'}\n:::\n:::\n\n\n\n### Instructions\n\n**Remember to**:\n\n-   Evaluate all of your code cells, in order (using a `Run All`\n    command). This will make sure all output is visible and that the\n    code cells were evaluated in the correct order.\n-   Tag each of the problems when you submit to Gradescope; a 10%\n    penalty will be deducted if this is not done.\n\n\n## Exercise (3 Points)\n\nThe Showcase is the final round of every episode of The Price is Right, matching the two big winners from the episode. Each contestant is shown a \"showcase\" of prizes, which are usually some combination of a trip, a motor vehicle, some furniture, and maybe some other stuff. They then each have to make a bid on the retail price of the showcase. The rules are:\n\n* an overbid is an automatic loss;\n* the contest who gets closest to the retail price wins their showcase;\n* if a contestant gets within \\$250 of the retail price and is closer than their opponent, they win both showcases.\n\n\nYour goal is to find a wager which maximizes your expected winnings, which we may as well call utility, based on your assessment of the probability of your showcase retail price. Make the following assumptions about your expected winnings if you don't overbid:\n\n* If you win both showcases, the value is the double of the single showcase value. \n* If you did not win both showcases but bid under the showcase value, the probability of being outbid increases linearly as the distance between your bid and the value increases (in other words, if you bid the exact value, you win with probability 1, and if you bid \\$0, you win with probability 0).\n\nWe'll assume that the distribution of all showcases offered by the show is given as truncated normal distribution, which means a normal distribution which has an upper and/or lower bound. `Distributions.jl` makes it easy to specify truncations on any distribution, not just normal distributions. For example, we'll use the distribution shown in @fig-values for the showcase values (you can just directly use the `showcase_dist` distribution in your lab code).\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nshowcase_dist = truncated(Normal(31000, 4500), lower=5000, upper=42000)\nshowcase_samples = rand(showcase_dist, 10_000)\nhistogram(showcase_samples)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n![Distribution of Showcase values for this lab, given as a truncated normal distribution.](lab02_files/figure-pdf/fig-values-output-1.svg){#fig-values fig-pos='H'}\n:::\n:::\n\n\n\nFind your expected winnings if you bid $35,000. Plot the outcomes of your Monte Carlo experiment (iterations vs. running estimate). How did you decide how many samples to use?\n\n\n::: {.cell .markdown}\n\n## References\n\nPut any consulted sources here, including classmates you worked with/who helped you.\n:::\n\n",
    "supporting": [
      "lab02_files/figure-pdf"
    ],
    "filters": []
  }
}